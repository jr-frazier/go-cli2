name: goreleaser

on:
  push:
    # run only against tags
    tags:
      - '*'

permissions:
  contents: write
  # packages: write
  # issues: write

jobs:
  test-package:
    if: ${{ !contains(github.event.head_commit.message, 'skip ci') }}
    runs-on: ubuntu-latest
    name: test-package
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Go 1.11 and Test
        uses: cedrickring/golang-action/go1.11@1.6.0
        env:
          IMPORT: "jr-frazier/go-cli2"
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch --force --tags
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.2'
          cache: true
      # More assembly might be required: Docker logins, GPG, etc. It all depends
      # on your needs.
      - uses: goreleaser/goreleaser-action@v2
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro':
          distribution: goreleaser
          version: ${{ env.GITHUB_REF_NAME }}
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISHER_TOKEN}}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro'
          # distribution:
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  deploy-to-packagecloud:
    needs: goreleaser
    runs-on: ubuntu-latest
    steps:
      - uses: actions/upload-artifact@v2
        with:
          name: gocli2_0.3.12_linux_amd64.deb
          path: gocli2_0.3.12_linux_amd64.deb
      - uses: actions/push-to-packagecloud
        with:
          PACKAGE-NAME: gocli2_0.3.12_linux_amd64.deb
          PACKAGECLOUD-USERNAME: p1
          PACKAGECLOUD-REPO: gocli2
          PACKAGECLOUD-DISTRIB: ubuntu/jammy
          PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}

